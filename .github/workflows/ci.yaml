name: Continous Integration

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - uses: cedx/setup-dart@v2
      - uses: actions/checkout@v2
      - run: dart pub get
      - run: dart run build_runner build
      - run: dart analyze --fatal-infos
      - run: dart --no-sound-null-safety test --coverage=coverage
      - run: dart run coverage:format_coverage --lcov -i coverage -o coverage/lcov.info --packages .packages --report-on lib -c
      - uses: VeryGoodOpenSource/very_good_coverage@v1.1.1
        with:
          min_coverage: 95
          exclude: "**/hooks_provider.dart **/*.g.dart **/*.freezed.dart"
      - run: rm lib/src/.gitignore
      - run: dart pub publish --dry-run || true

  release:
    runs-on: ubuntu-latest
    needs:
      - test
    # if: github.ref == 'refs/heads/master'
    if: github.ref == 'refs/heads/null-safety'
    outputs:
      update: ${{ steps.version.outputs.update }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
      - uses: cedx/setup-dart@v2
      - uses: actions/checkout@v2
      - uses: Skycoder42/action-dart-release@v1
        id: version
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.tag_name }}
          release_name: ${{ steps.version.outputs.release_name }}
          body_path: ${{ steps.version.outputs.body_path }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - release
    if: needs.release.outputs.update == 'true'
    steps:
      - uses: cedx/setup-dart@v2
      - uses: actions/checkout@v2
      - run: dart pub get
      - run: dart run build_runner build
      - run: rm lib/src/.gitignore
      - name: store credentials
        run: |
          mkdir -p ~/.pub-cache
          echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > ~/.pub-cache/credentials.json
      - run: dart pub publish --force
      - name: clean up credentials
        if: always()
        run: shred -fzvu ~/.pub-cache/credentials.json

  doc:
    runs-on: ubuntu-latest
    needs:
      - release
    if: needs.release.outputs.update == 'true'
    steps:
      - uses: cedx/setup-dart@v2
      - uses: actions/checkout@v2
      - run: dart pub get
      - run: dart run build_runner build
      - run: dartdoc
      - name: upload doc
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: doc/api
          commit_message: Updated documentation to v${{ needs.release.outputs.tag_name }}
